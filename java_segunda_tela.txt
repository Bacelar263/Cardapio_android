package com.example.trabalho;

import androidx.appcompat.app.AppCompatActivity;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.ColorStateList;
import android.graphics.Color;
import android.graphics.Typeface;
import android.os.Bundle;
import android.text.Layout;
import android.text.SpannableString;
import android.text.Spanned;
import android.text.style.ForegroundColorSpan;
import android.util.TypedValue;
import android.view.MotionEvent;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.TextView;

import java.text.DecimalFormat;

public class Lista extends AppCompatActivity {

    private int contadorCheckbox = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_lista);

        // Pegando o Imagebutton que irá redirecionar para a primeira tela
        ImageButton primeira_tela = findViewById(R.id.btnTela1);

        // Definindo função para o ImageButton previamente pego
        primeira_tela.setOnClickListener(new View.OnClickListener() {
            @Override
            //Função que ao clicar no ImageButton pego redireciona para a primeira página.
            public void onClick(View v) {
                irPriT(v);
            }
        });

        // Pegando o botão que irá abrir a caixa de diálogo com o resultado.
        Button btnResult = findViewById(R.id.btnResult);


        EditText nomeItem = findViewById(R.id.EDTaddNomeItem);
        EditText valorItem = findViewById(R.id.EDTaddValorItem);
        ImageButton addItem = findViewById(R.id.btnADD);
        LinearLayout checkBoxLayout = findViewById(R.id.checkBoxLayout);



        addItem.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String nome = nomeItem.getText().toString();
                String valor = valorItem.getText().toString();

                // Converter o valor para decimal
                double valorDecimal = Double.parseDouble(valor);

                // Formatar o valor para exibição em formato decimal
                DecimalFormat decimalFormat = new DecimalFormat("0.00");
                String valorFormatado = decimalFormat.format(valorDecimal);

                if (contadorCheckbox < 14) {
                    CheckBox checkBox = new CheckBox(Lista.this);
                    checkBox.setText(nome + " - R$ " + valorFormatado);
                    checkBox.setButtonTintList(ColorStateList.valueOf(Color.WHITE));
                    checkBox.setTextColor(Color.WHITE);
                    checkBox.setTypeface(checkBox.getTypeface(), Typeface.BOLD);
                    checkBox.setTextSize(TypedValue.COMPLEX_UNIT_SP, 18);
                    checkBox.setTypeface(Typeface.create("poppins", Typeface.BOLD));

                    LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                            LinearLayout.LayoutParams.WRAP_CONTENT,
                            LinearLayout.LayoutParams.WRAP_CONTENT
                    );
                    params.setMargins(0, 0, 0, 20);

                    // Adicionar o gesto de deslizar para a esquerda ao CheckBox
                    checkBox.setOnTouchListener(new View.OnTouchListener() {
                        private float startX;
                        private float deltaX;

                        @Override
                        public boolean onTouch(View v, MotionEvent event) {
                            switch (event.getAction()) {
                                case MotionEvent.ACTION_DOWN:
                                    // Armazenar a posição inicial do toque
                                    startX = event.getX();
                                    return true;
                                case MotionEvent.ACTION_MOVE:
                                    // Calcular a distância percorrida no eixo X
                                    float endX = event.getX();
                                    deltaX = endX - startX;

                                    // Verificar se a distância percorrida é maior do que 100 pixels
                                    if (deltaX < -100) {
                                        // Alterar a cor de fundo do CheckBox para vermelho
                                        checkBox.setBackgroundColor(Color.RED);
                                    } else {
                                        // Reverter a cor de fundo do CheckBox para a cor original
                                        checkBox.setBackgroundColor(Color.TRANSPARENT);
                                    }
                                    return true;
                                case MotionEvent.ACTION_UP:
                                    // Verificar se a distância percorrida é maior do que 100 pixels
                                    if (deltaX < -100) {
                                        // Remover o CheckBox do layout
                                        checkBoxLayout.removeView(v);
                                    } else {
                                        // Reverter a cor de fundo do CheckBox para a cor original
                                        checkBox.setBackgroundColor(Color.TRANSPARENT);
                                    }
                                    return true;
                            }
                            return false;
                        }
                    });


                    checkBox.setLayoutParams(params);

                    checkBoxLayout.addView(checkBox);
                    contadorCheckbox++;
                }

                if (contadorCheckbox == 14) {
                    nomeItem.setVisibility(View.GONE);
                    valorItem.setVisibility(View.GONE);
                    addItem.setVisibility(View.GONE);
                }
            }
        });


        // Definindo função para o botão previamente pego
        btnResult.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // Definindo variável int para armazenar a quantidade de itens
                Integer qtd = 0;
                // Definindo variável Strings para armazenar todos os itens
                String itens = "";
                // Definindo variável Double para armazenar a soma de todos os itens
                Double valorTotal = 0.0;

                // For responsável por rodar em todos os checkbox dentro do checkbox layout a partir da quantidade de checkbox presente dentro do layout
                for (int i = 0; i < checkBoxLayout.getChildCount(); i++) {
                    // Pegando cada um dos checkbox com o id encontrado pelo for
                    View view = checkBoxLayout.getChildAt(i);

                    // Verificando se a view foi instanciada no checkbox
                    if (view instanceof CheckBox) {
                        // Criando uma checkbox view para o controle
                        CheckBox checkBox = (CheckBox) view;
                        // Checando se a checkbox está marcada
                        if (checkBox.isChecked()) {
                            // Acrescetando mais itens na váriavel qtd definida anteriormente
                            qtd++;
                            // Acrescetando o texto na cadeia de itens
                            itens += checkBox.getText() + "\n";
                            // Pegando o valor de cada um dos checkbox e somando os valores
                            valorTotal += Double.parseDouble(checkBox.getText().toString().replaceAll("[^0-9.,]", "").replace(",", "."));
                        }
                    }
                }

                // Verificando se nenhum dos itens foram escolhidos
                if (itens.isEmpty()) {
                    itens = "Nenhum item foi escolhido";
                }

                // Criando um novo método através da classe DecimalFormat, que tem como função formatar os números decimais como Double, para trazer uma melhor vizualização.
                DecimalFormat decimalFormat = new DecimalFormat("#.00");

                // Criando instância do AlertDialog.Builder, função responsável criar uma caixa de diálogo
                AlertDialog.Builder builder = new AlertDialog.Builder(Lista.this);

                // Definindo título da caixa de diálogo
                builder.setTitle("Resultado da sua lista de compras");

                // Definindo a mensagem da caixa de diálogo
                builder.setMessage("\n\n Foram escolhidos " + qtd + " itens sendo eles: \n"+ itens + " \n\n O valor total foi de: R$" + decimalFormat.format(valorTotal) + " ");

                // Definindo botão positivo cujo texto será "Finalizar" na caixa de diálogo e também definindo uma função para esse botão quando for clicado.
                builder.setPositiveButton("Finalizar", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        // Quando o botão for clicado ele irá criar uma nova caixa de diálogo para exibir outra mensagem
                        AlertDialog.Builder builder = new AlertDialog.Builder(Lista.this);

                        // Criando o SpannableString que tem a função de mudar texto da caixa de diálogo.
                        SpannableString spannableString = new SpannableString("Compra finalizada com sucesso");

                        // Mudando o título para a cor verde definido através de um hexadecimal, que atráves da função "Color.parseColor" está sendo transformado para o formato ARGB para o método ForegroundColorSpan reconhece-lo
                        ForegroundColorSpan foregroundColorSpan = new ForegroundColorSpan(Color.parseColor("#012b28"));

                        // Definindo todas as mudanças no título. Que nesse caso só foi a cor
                        spannableString.setSpan(foregroundColorSpan, 0, spannableString.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);

                        // Definindo a varíavel que mudamos como o título da caixa de diálogo que agora estará na cor hexadecimal informada antes
                        builder.setTitle(spannableString);

                        // Definindo mensagem para a caixa de díalogo
                        builder.setMessage("Muito obrigado! Volte sempre a Top Food!");

                        // Criando a segunda caixa de diálogo
                        AlertDialog dialog2 = builder.create();

                        // Mostrando a segunda classe de diálogo
                        dialog2.show();

                        // Método resposável por fechar a primeira caixa de diálogo, antes mesmo da segunda caixa criada acima ser executada.
                        dialog.dismiss();
                    }
                });

                // Definindo um botão negativo cujo texto será "Cancelar" na caixa de diálogo e também definindo uma função para esse botão quando for clicado.
                builder.setNegativeButton("Cancelar", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        // Quando clicar em cancelar ele apenas irá rodar o método resposável por fechar a  caixa de diálogo.
                        dialog.dismiss();
                    }
                });

                // Criando a primeira caixa de diálogo
                AlertDialog dialog = builder.create();

                // Definindo método setOnShowListener que é responsável por fazer mudanças visuais na hora que a caixa de dialogo ser aberta
                dialog.setOnShowListener(new DialogInterface.OnShowListener() {
                    @Override
                    public void onShow(DialogInterface dialogInterface) {
                        // Pegando o botão negativo "Cancelar" e o botão positivo "Finalizar", ambos criados anteriormente e armezando eles em uma variável.
                        Button negativeButton = dialog.getButton(AlertDialog.BUTTON_NEGATIVE);
                        Button positiveButton = dialog.getButton(AlertDialog.BUTTON_POSITIVE);

                        // Utilizando a variável criada anteriormente, para definir uma cor para cada um dos botões da caixa de dialógo.
                        // No botão negativo está sendo definida uma cor vermelha puxada da própria IDE
                        negativeButton.setTextColor(Color.RED);

                        // Já no botão positivo está sendo definida uma cor ver definida através de um valor hexadecimal. Fazendo uso do método "parsecolor" que transforma o valor inserido em ARGB.
                        positiveButton.setTextColor(Color.parseColor("#00a67d"));
                    }
                });

                // Exibindo a primeira caixa de diálogo
                dialog.show();
            }
        });
    }



    // Criando método para ir para a primeira tela cujo nome é MainActivity.
    public void irPriT(View view){
        Intent in = new Intent(Lista.this, MainActivity.class);
        startActivity(in);
    }
}